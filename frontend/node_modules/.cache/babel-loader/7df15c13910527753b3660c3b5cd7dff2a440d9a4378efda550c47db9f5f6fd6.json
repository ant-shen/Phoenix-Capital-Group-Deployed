{"ast":null,"code":"export default {\n  data() {\n    return {\n      landHolding: {\n        name: '',\n        legalEntity: '',\n        netMineralAcres: '',\n        mineralOwnerRoyalty: '',\n        section: '',\n        township: '',\n        range: '',\n        titleSource: 'Class A'\n      },\n      isSectionValid: true,\n      isTownshipValid: true,\n      isRangeValid: true,\n      isFormValid: true\n    };\n  },\n  created() {\n    this.fetchLandHolding();\n  },\n  methods: {\n    fetchLandHolding() {\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`).then(response => response.json()).then(data => {\n        this.landHolding = data;\n      }).catch(error => {\n        console.error('Error fetching land holding:', error);\n      });\n    },\n    validateSection() {\n      const sectionPattern = /^\\d{3}$/;\n      this.isSectionValid = sectionPattern.test(this.landHolding.section);\n      this.checkFormValidity();\n    },\n    validateTownship() {\n      const townshipPattern = /^\\d{3}[NS]$/;\n      this.isTownshipValid = townshipPattern.test(this.landHolding.township);\n      this.checkFormValidity();\n    },\n    validateRange() {\n      const rangePattern = /^\\d{3}[EW]$/;\n      this.isRangeValid = rangePattern.test(this.landHolding.range);\n      this.checkFormValidity();\n    },\n    checkFormValidity() {\n      this.isFormValid = this.isSectionValid && this.isTownshipValid && this.isRangeValid;\n    },\n    updateLandHolding() {\n      if (!this.isFormValid) {\n        alert('Please correct the form errors before submitting.');\n        return;\n      }\n      const sectionName = `${this.landHolding.section}-${this.landHolding.township}-${this.landHolding.range}`;\n      const updatedLandHolding = {\n        ...this.landHolding,\n        sectionName\n      };\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedLandHolding)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to update land holding');\n        }\n        this.$router.push('/landholding');\n      }).catch(error => {\n        console.error('Error updating land holding:', error);\n        alert('Failed to update land holding.');\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","landHolding","name","legalEntity","netMineralAcres","mineralOwnerRoyalty","section","township","range","titleSource","isSectionValid","isTownshipValid","isRangeValid","isFormValid","created","fetchLandHolding","methods","id","$route","params","fetch","then","response","json","catch","error","console","validateSection","sectionPattern","test","checkFormValidity","validateTownship","townshipPattern","validateRange","rangePattern","updateLandHolding","alert","sectionName","updatedLandHolding","method","headers","body","JSON","stringify","ok","Error","$router","push"],"sources":["src/views/LandHoldingDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Land Holding Details</h2>\n    <form @submit.prevent=\"updateLandHolding\">\n      <div>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"landHolding.name\" required />\n      </div>\n      <div>\n        <label for=\"legalEntity\">Legal Entity:</label>\n        <input type=\"text\" id=\"legalEntity\" v-model=\"landHolding.legalEntity\" required />\n      </div>\n      <div>\n        <label for=\"netMineralAcres\">Net Mineral Acres:</label>\n        <input type=\"number\" id=\"netMineralAcres\" v-model=\"landHolding.netMineralAcres\" required />\n      </div>\n      <div>\n        <label for=\"mineralOwnerRoyalty\">Mineral Owner Royalty (%):</label>\n        <input type=\"number\" id=\"mineralOwnerRoyalty\" v-model=\"landHolding.mineralOwnerRoyalty\" required />\n      </div>\n      <div>\n        <label for=\"section\">Section:</label>\n        <input type=\"text\" id=\"section\" v-model=\"landHolding.section\" required @input=\"validateSection\" />\n        <span v-if=\"!isSectionValid\" class=\"error-message\">Section must be exactly 3 digits.</span>\n      </div>\n      <div>\n        <label for=\"township\">Township:</label>\n        <input type=\"text\" id=\"township\" v-model=\"landHolding.township\" required @input=\"validateTownship\" />\n        <span v-if=\"!isTownshipValid\" class=\"error-message\">Township must be 3 digits followed by \"N\" or \"S\".</span>\n      </div>\n      <div>\n        <label for=\"range\">Range:</label>\n        <input type=\"text\" id=\"range\" v-model=\"landHolding.range\" required @input=\"validateRange\" />\n        <span v-if=\"!isRangeValid\" class=\"error-message\">Range must be 3 digits followed by \"E\" or \"W\".</span>\n      </div>\n      <div>\n        <label for=\"titleSource\">Title Source:</label>\n        <select id=\"titleSource\" v-model=\"landHolding.titleSource\" required>\n          <option value=\"Class A\">Class A</option>\n          <option value=\"Class B\">Class B</option>\n          <option value=\"Class C\">Class C</option>\n          <option value=\"Class D\">Class D</option>\n        </select>\n      </div>\n      <button type=\"submit\" :disabled=\"!isFormValid\">Update Land Holding</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      landHolding: {\n        name: '',\n        legalEntity: '',\n        netMineralAcres: '',\n        mineralOwnerRoyalty: '',\n        section: '',\n        township: '',\n        range: '',\n        titleSource: 'Class A',\n      },\n      isSectionValid: true,\n      isTownshipValid: true,\n      isRangeValid: true,\n      isFormValid: true,\n    };\n  },\n  created() {\n    this.fetchLandHolding();\n  },\n  methods: {\n    fetchLandHolding() {\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`)\n        .then((response) => response.json())\n        .then((data) => {\n          this.landHolding = data;\n        })\n        .catch((error) => {\n          console.error('Error fetching land holding:', error);\n        });\n    },\n    validateSection() {\n      const sectionPattern = /^\\d{3}$/;\n      this.isSectionValid = sectionPattern.test(this.landHolding.section);\n      this.checkFormValidity();\n    },\n    validateTownship() {\n      const townshipPattern = /^\\d{3}[NS]$/;\n      this.isTownshipValid = townshipPattern.test(this.landHolding.township);\n      this.checkFormValidity();\n    },\n    validateRange() {\n      const rangePattern = /^\\d{3}[EW]$/;\n      this.isRangeValid = rangePattern.test(this.landHolding.range);\n      this.checkFormValidity();\n    },\n    checkFormValidity() {\n      this.isFormValid = this.isSectionValid && this.isTownshipValid && this.isRangeValid;\n    },\n    updateLandHolding() {\n      if (!this.isFormValid) {\n        alert('Please correct the form errors before submitting.');\n        return;\n      }\n\n      const sectionName = `${this.landHolding.section}-${this.landHolding.township}-${this.landHolding.range}`;\n      const updatedLandHolding = {\n        ...this.landHolding,\n        sectionName,\n      };\n\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedLandHolding),\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Failed to update land holding');\n          }\n          this.$router.push('/landholding');\n        })\n        .catch((error) => {\n          console.error('Error updating land holding:', error);\n          alert('Failed to update land holding.');\n        });\n    },\n  },\n};\n</script>\n\n<style>\n.error-message {\n  color: red;\n  font-size: 0.9em;\n}\n</style>\n"],"mappings":"AAkDA;EACAA,KAAA;IACA;MACAC,WAAA;QACAC,IAAA;QACAC,WAAA;QACAC,eAAA;QACAC,mBAAA;QACAC,OAAA;QACAC,QAAA;QACAC,KAAA;QACAC,WAAA;MACA;MACAC,cAAA;MACAC,eAAA;MACAC,YAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA,MAAAE,EAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,EAAA;MACAG,KAAA,sBAAAH,EAAA,IACAI,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAArB,IAAA;QACA,KAAAC,WAAA,GAAAD,IAAA;MACA,GACAwB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;IACAE,gBAAA;MACA,MAAAC,cAAA;MACA,KAAAlB,cAAA,GAAAkB,cAAA,CAAAC,IAAA,MAAA5B,WAAA,CAAAK,OAAA;MACA,KAAAwB,iBAAA;IACA;IACAC,iBAAA;MACA,MAAAC,eAAA;MACA,KAAArB,eAAA,GAAAqB,eAAA,CAAAH,IAAA,MAAA5B,WAAA,CAAAM,QAAA;MACA,KAAAuB,iBAAA;IACA;IACAG,cAAA;MACA,MAAAC,YAAA;MACA,KAAAtB,YAAA,GAAAsB,YAAA,CAAAL,IAAA,MAAA5B,WAAA,CAAAO,KAAA;MACA,KAAAsB,iBAAA;IACA;IACAA,kBAAA;MACA,KAAAjB,WAAA,QAAAH,cAAA,SAAAC,eAAA,SAAAC,YAAA;IACA;IACAuB,kBAAA;MACA,UAAAtB,WAAA;QACAuB,KAAA;QACA;MACA;MAEA,MAAAC,WAAA,WAAApC,WAAA,CAAAK,OAAA,SAAAL,WAAA,CAAAM,QAAA,SAAAN,WAAA,CAAAO,KAAA;MACA,MAAA8B,kBAAA;QACA,QAAArC,WAAA;QACAoC;MACA;MAEA,MAAApB,EAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,EAAA;MACAG,KAAA,sBAAAH,EAAA;QACAsB,MAAA;QACAC,OAAA;UACA;QACA;QACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAL,kBAAA;MACA,GACAjB,IAAA,CAAAC,QAAA;QACA,KAAAA,QAAA,CAAAsB,EAAA;UACA,UAAAC,KAAA;QACA;QACA,KAAAC,OAAA,CAAAC,IAAA;MACA,GACAvB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;QACAW,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}