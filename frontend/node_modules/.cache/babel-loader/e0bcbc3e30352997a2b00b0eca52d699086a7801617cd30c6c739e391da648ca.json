{"ast":null,"code":"export default {\n  data() {\n    return {\n      landHolding: {\n        name: '',\n        legalEntity: '',\n        netMineralAcres: '',\n        mineralOwnerRoyalty: '',\n        section: '',\n        township: '',\n        range: '',\n        titleSource: 'Class A'\n      },\n      isSectionValid: true,\n      isTownshipValid: true,\n      isRangeValid: true\n    };\n  },\n  created() {\n    this.fetchLandHolding();\n  },\n  methods: {\n    fetchLandHolding() {\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`).then(response => response.json()).then(data => {\n        this.landHolding = data;\n      }).catch(error => {\n        console.error('Error fetching land holding:', error);\n      });\n    },\n    validateFields() {\n      const sectionPattern = /^\\d{3}$/;\n      const townshipPattern = /^\\d{3}[NS]$/;\n      const rangePattern = /^\\d{3}[EW]$/;\n      this.isSectionValid = sectionPattern.test(this.landHolding.section);\n      this.isTownshipValid = townshipPattern.test(this.landHolding.township);\n      this.isRangeValid = rangePattern.test(this.landHolding.range);\n      return this.isSectionValid && this.isTownshipValid && this.isRangeValid;\n    },\n    updateLandHolding() {\n      if (!this.validateFields()) {\n        return;\n      }\n      const sectionName = `${this.landHolding.section}-${this.landHolding.township}-${this.landHolding.range}`;\n      const updatedLandHolding = {\n        ...this.landHolding,\n        sectionName\n      };\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedLandHolding)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to update land holding');\n        }\n        this.$router.push('/landholdings');\n      }).catch(error => {\n        console.error('Error updating land holding:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","landHolding","name","legalEntity","netMineralAcres","mineralOwnerRoyalty","section","township","range","titleSource","isSectionValid","isTownshipValid","isRangeValid","created","fetchLandHolding","methods","id","$route","params","fetch","then","response","json","catch","error","console","validateFields","sectionPattern","townshipPattern","rangePattern","test","updateLandHolding","sectionName","updatedLandHolding","method","headers","body","JSON","stringify","ok","Error","$router","push"],"sources":["src/views/LandHoldingDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Land Holding Details</h2>\n    <form @submit.prevent=\"updateLandHolding\">\n      <div>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"landHolding.name\" required />\n      </div>\n      <div>\n        <label for=\"legalEntity\">Legal Entity:</label>\n        <input type=\"text\" id=\"legalEntity\" v-model=\"landHolding.legalEntity\" required />\n      </div>\n      <div>\n        <label for=\"netMineralAcres\">Net Mineral Acres:</label>\n        <input type=\"number\" id=\"netMineralAcres\" v-model=\"landHolding.netMineralAcres\" required />\n      </div>\n      <div>\n        <label for=\"mineralOwnerRoyalty\">Mineral Owner Royalty (%):</label>\n        <input type=\"number\" id=\"mineralOwnerRoyalty\" v-model=\"landHolding.mineralOwnerRoyalty\" required />\n      </div>\n      <div>\n        <label for=\"section\">Section:</label>\n        <input type=\"text\" id=\"section\" v-model=\"landHolding.section\" required pattern=\"\\d{3}\" />\n        <span v-if=\"!isSectionValid\">Section must be exactly 3 digits.</span>\n      </div>\n      <div>\n        <label for=\"township\">Township:</label>\n        <input type=\"text\" id=\"township\" v-model=\"landHolding.township\" required pattern=\"\\d{3}[NS]\" />\n        <span v-if=\"!isTownshipValid\">Township must be 3 digits followed by \"N\" or \"S\".</span>\n      </div>\n      <div>\n        <label for=\"range\">Range:</label>\n        <input type=\"text\" id=\"range\" v-model=\"landHolding.range\" required pattern=\"\\d{3}[EW]\" />\n        <span v-if=\"!isRangeValid\">Range must be 3 digits followed by \"E\" or \"W\".</span>\n      </div>\n      <div>\n        <label for=\"titleSource\">Title Source:</label>\n        <select id=\"titleSource\" v-model=\"landHolding.titleSource\" required>\n          <option value=\"Class A\">Class A</option>\n          <option value=\"Class B\">Class B</option>\n          <option value=\"Class C\">Class C</option>\n          <option value=\"Class D\">Class D</option>\n        </select>\n      </div>\n      <button type=\"submit\">Update Land Holding</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      landHolding: {\n        name: '',\n        legalEntity: '',\n        netMineralAcres: '',\n        mineralOwnerRoyalty: '',\n        section: '',\n        township: '',\n        range: '',\n        titleSource: 'Class A',\n      },\n      isSectionValid: true,\n      isTownshipValid: true,\n      isRangeValid: true,\n    };\n  },\n  created() {\n    this.fetchLandHolding();\n  },\n  methods: {\n    fetchLandHolding() {\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`)\n        .then((response) => response.json())\n        .then((data) => {\n          this.landHolding = data;\n        })\n        .catch((error) => {\n          console.error('Error fetching land holding:', error);\n        });\n    },\n    validateFields() {\n      const sectionPattern = /^\\d{3}$/;\n      const townshipPattern = /^\\d{3}[NS]$/;\n      const rangePattern = /^\\d{3}[EW]$/;\n\n      this.isSectionValid = sectionPattern.test(this.landHolding.section);\n      this.isTownshipValid = townshipPattern.test(this.landHolding.township);\n      this.isRangeValid = rangePattern.test(this.landHolding.range);\n\n      return this.isSectionValid && this.isTownshipValid && this.isRangeValid;\n    },\n    updateLandHolding() {\n      if (!this.validateFields()) {\n        return;\n      }\n\n      const sectionName = `${this.landHolding.section}-${this.landHolding.township}-${this.landHolding.range}`;\n      const updatedLandHolding = {\n        ...this.landHolding,\n        sectionName,\n      };\n\n      const id = this.$route.params.id;\n      fetch(`/api/landholdings/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedLandHolding),\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Failed to update land holding');\n          }\n          this.$router.push('/landholdings');\n        })\n        .catch((error) => {\n          console.error('Error updating land holding:', error);\n        });\n    },\n  },\n};\n</script>\n"],"mappings":"AAkDA;EACAA,KAAA;IACA;MACAC,WAAA;QACAC,IAAA;QACAC,WAAA;QACAC,eAAA;QACAC,mBAAA;QACAC,OAAA;QACAC,QAAA;QACAC,KAAA;QACAC,WAAA;MACA;MACAC,cAAA;MACAC,eAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA,MAAAE,EAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,EAAA;MACAG,KAAA,sBAAAH,EAAA,IACAI,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAApB,IAAA;QACA,KAAAC,WAAA,GAAAD,IAAA;MACA,GACAuB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;IACAE,eAAA;MACA,MAAAC,cAAA;MACA,MAAAC,eAAA;MACA,MAAAC,YAAA;MAEA,KAAAnB,cAAA,GAAAiB,cAAA,CAAAG,IAAA,MAAA7B,WAAA,CAAAK,OAAA;MACA,KAAAK,eAAA,GAAAiB,eAAA,CAAAE,IAAA,MAAA7B,WAAA,CAAAM,QAAA;MACA,KAAAK,YAAA,GAAAiB,YAAA,CAAAC,IAAA,MAAA7B,WAAA,CAAAO,KAAA;MAEA,YAAAE,cAAA,SAAAC,eAAA,SAAAC,YAAA;IACA;IACAmB,kBAAA;MACA,UAAAL,cAAA;QACA;MACA;MAEA,MAAAM,WAAA,WAAA/B,WAAA,CAAAK,OAAA,SAAAL,WAAA,CAAAM,QAAA,SAAAN,WAAA,CAAAO,KAAA;MACA,MAAAyB,kBAAA;QACA,QAAAhC,WAAA;QACA+B;MACA;MAEA,MAAAhB,EAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,EAAA;MACAG,KAAA,sBAAAH,EAAA;QACAkB,MAAA;QACAC,OAAA;UACA;QACA;QACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA,CAAAL,kBAAA;MACA,GACAb,IAAA,CAAAC,QAAA;QACA,KAAAA,QAAA,CAAAkB,EAAA;UACA,UAAAC,KAAA;QACA;QACA,KAAAC,OAAA,CAAAC,IAAA;MACA,GACAnB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}