{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'OwnerDetails',\n  data() {\n    return {\n      owner: {},\n      // Initialize as empty object\n      landHoldings: [],\n      // Initialize as empty array\n      legalEntity: '',\n      netMineralAcres: '',\n      mineralOwnerRoyalty: '',\n      section: '',\n      township: '',\n      range: '',\n      titleSource: '',\n      isSectionValid: true,\n      isTownshipValid: true,\n      isRangeValid: true\n    };\n  },\n  async created() {\n    try {\n      const ownerId = this.$route.params.id;\n\n      // Fetch the owner details\n      const ownerResponse = await axios.get(`http://localhost:5001/api/owners/${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.owner = ownerResponse.data;\n\n      // Fetch the land holdings for this owner\n      const holdingsResponse = await axios.get(`http://localhost:5001/api/landholdings?owner=${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.landHoldings = holdingsResponse.data;\n    } catch (error) {\n      console.error('Failed to fetch owner or land holdings:', error);\n      this.$router.push('/dashboard');\n    }\n  },\n  methods: {\n    validateFields() {\n      const sectionPattern = /^\\d{3}$/;\n      const townshipPattern = /^\\d{3}[NS]$/;\n      const rangePattern = /^\\d{3}[EW]$/;\n      this.isSectionValid = sectionPattern.test(this.section);\n      this.isTownshipValid = townshipPattern.test(this.township);\n      this.isRangeValid = rangePattern.test(this.range);\n      return this.isSectionValid && this.isTownshipValid && this.isRangeValid;\n    },\n    async createLandHolding() {\n      if (!this.validateFields()) {\n        return;\n      }\n      try {\n        const ownerId = this.$route.params.id;\n        const response = await axios.post('http://localhost:5001/api/landholdings', {\n          name: `${this.section}-${this.township}-${this.range}`,\n          // Use a combination for name\n          owner: ownerId,\n          legalEntity: this.legalEntity,\n          netMineralAcres: this.netMineralAcres,\n          mineralOwnerRoyalty: this.mineralOwnerRoyalty,\n          section: this.section,\n          township: this.township,\n          range: this.range,\n          titleSource: this.titleSource\n        }, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.landHoldings.push(response.data);\n        // Clear form fields after submission\n        this.legalEntity = '';\n        this.netMineralAcres = '';\n        this.mineralOwnerRoyalty = '';\n        this.section = '';\n        this.township = '';\n        this.range = '';\n        this.titleSource = '';\n      } catch (error) {\n        console.error('Failed to create land holding:', error);\n        alert('Failed to create land holding.');\n      }\n    },\n    async deleteLandHolding(holdingId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/landholdings/${holdingId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.landHoldings = this.landHoldings.filter(holding => holding._id !== holdingId);\n      } catch (error) {\n        console.error('Failed to delete land holding:', error);\n        alert('Failed to delete land holding.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","owner","landHoldings","legalEntity","netMineralAcres","mineralOwnerRoyalty","section","township","range","titleSource","isSectionValid","isTownshipValid","isRangeValid","created","ownerId","$route","params","id","ownerResponse","get","headers","Authorization","$store","state","token","holdingsResponse","error","console","$router","push","methods","validateFields","sectionPattern","townshipPattern","rangePattern","test","createLandHolding","response","post","alert","deleteLandHolding","holdingId","delete","filter","holding","_id"],"sources":["src/views/OwnerDetails.vue"],"sourcesContent":["<template>\n  <div class=\"owner-details\">\n    <h2>{{ owner.ownerName }}</h2>\n    <p>Address: {{ owner.address }}</p>\n    \n    <!-- Land Holdings List -->\n    <h3>Land Holdings</h3>\n    <ul>\n      <li v-for=\"holding in landHoldings\" :key=\"holding._id\">\n        <router-link :to=\"'/landholding/' + holding._id\">\n          {{ holding.name }} - {{ holding.legalEntity }}\n        </router-link>\n        <!-- Delete Button -->\n        <button @click=\"deleteLandHolding(holding._id)\">Delete</button>\n      </li>\n    </ul>\n\n    <!-- Create Land Holding Form -->\n    <form @submit.prevent=\"createLandHolding\">\n      <h3>Create New Land Holding</h3>\n      <div>\n        <label for=\"legalEntity\">Legal Entity:</label>\n        <input type=\"text\" id=\"legalEntity\" v-model=\"legalEntity\" required />\n      </div>\n      <div>\n        <label for=\"netMineralAcres\">Net Mineral Acres:</label>\n        <input type=\"number\" id=\"netMineralAcres\" v-model=\"netMineralAcres\" required />\n      </div>\n      <div>\n        <label for=\"mineralOwnerRoyalty\">Mineral Owner Royalty (%):</label>\n        <input type=\"number\" id=\"mineralOwnerRoyalty\" v-model=\"mineralOwnerRoyalty\" required />\n      </div>\n      <div>\n        <label for=\"section\">Section:</label>\n        <input type=\"text\" id=\"section\" v-model=\"section\" required pattern=\"\\d{3}\" />\n        <span v-if=\"!isSectionValid\">Section must be exactly 3 digits.</span>\n      </div>\n      <div>\n        <label for=\"township\">Township:</label>\n        <input type=\"text\" id=\"township\" v-model=\"township\" required pattern=\"\\d{3}[NS]\" />\n        <span v-if=\"!isTownshipValid\">Township must be 3 digits followed by \"N\" or \"S\".</span>\n      </div>\n      <div>\n        <label for=\"range\">Range:</label>\n        <input type=\"text\" id=\"range\" v-model=\"range\" required pattern=\"\\d{3}[EW]\" />\n        <span v-if=\"!isRangeValid\">Range must be 3 digits followed by \"E\" or \"W\".</span>\n      </div>\n      <div>\n        <label for=\"titleSource\">Title Source:</label>\n        <select id=\"titleSource\" v-model=\"titleSource\" required>\n          <option value=\"Class A\">Class A</option>\n          <option value=\"Class B\">Class B</option>\n          <option value=\"Class C\">Class C</option>\n          <option value=\"Class D\">Class D</option>\n        </select>\n      </div>\n      <button type=\"submit\">Create Land Holding</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'OwnerDetails',\n  data() {\n    return {\n      owner: {}, // Initialize as empty object\n      landHoldings: [], // Initialize as empty array\n      legalEntity: '',\n      netMineralAcres: '',\n      mineralOwnerRoyalty: '',\n      section: '',\n      township: '',\n      range: '',\n      titleSource: '',\n      isSectionValid: true,\n      isTownshipValid: true,\n      isRangeValid: true,\n    };\n  },\n  async created() {\n    try {\n      const ownerId = this.$route.params.id;\n      \n      // Fetch the owner details\n      const ownerResponse = await axios.get(`http://localhost:5001/api/owners/${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.owner = ownerResponse.data;\n\n      // Fetch the land holdings for this owner\n      const holdingsResponse = await axios.get(`http://localhost:5001/api/landholdings?owner=${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.landHoldings = holdingsResponse.data;\n    } catch (error) {\n      console.error('Failed to fetch owner or land holdings:', error);\n      this.$router.push('/dashboard');\n    }\n  },\n  methods: {\n    validateFields() {\n      const sectionPattern = /^\\d{3}$/;\n      const townshipPattern = /^\\d{3}[NS]$/;\n      const rangePattern = /^\\d{3}[EW]$/;\n\n      this.isSectionValid = sectionPattern.test(this.section);\n      this.isTownshipValid = townshipPattern.test(this.township);\n      this.isRangeValid = rangePattern.test(this.range);\n\n      return this.isSectionValid && this.isTownshipValid && this.isRangeValid;\n    },\n    async createLandHolding() {\n      if (!this.validateFields()) {\n        return;\n      }\n\n      try {\n        const ownerId = this.$route.params.id;\n        const response = await axios.post(\n          'http://localhost:5001/api/landholdings',\n          {\n            name: `${this.section}-${this.township}-${this.range}`, // Use a combination for name\n            owner: ownerId,\n            legalEntity: this.legalEntity,\n            netMineralAcres: this.netMineralAcres,\n            mineralOwnerRoyalty: this.mineralOwnerRoyalty,\n            section: this.section,\n            township: this.township,\n            range: this.range,\n            titleSource: this.titleSource,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n            },\n          }\n        );\n        this.landHoldings.push(response.data);\n        // Clear form fields after submission\n        this.legalEntity = '';\n        this.netMineralAcres = '';\n        this.mineralOwnerRoyalty = '';\n        this.section = '';\n        this.township = '';\n        this.range = '';\n        this.titleSource = '';\n      } catch (error) {\n        console.error('Failed to create land holding:', error);\n        alert('Failed to create land holding.');\n      }\n    },\n    async deleteLandHolding(holdingId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/landholdings/${holdingId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`,\n          },\n        });\n        this.landHoldings = this.landHoldings.filter(holding => holding._id !== holdingId);\n      } catch (error) {\n        console.error('Failed to delete land holding:', error);\n        alert('Failed to delete land holding.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AA8DA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,YAAA;MAAA;MACAC,WAAA;MACAC,eAAA;MACAC,mBAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;MACAC,WAAA;MACAC,cAAA;MACAC,eAAA;MACAC,YAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;MACA,MAAAC,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;;MAEA;MACA,MAAAC,aAAA,SAAApB,KAAA,CAAAqB,GAAA,qCAAAL,OAAA;QACAM,OAAA;UACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAAvB,KAAA,GAAAiB,aAAA,CAAAlB,IAAA;;MAEA;MACA,MAAAyB,gBAAA,SAAA3B,KAAA,CAAAqB,GAAA,iDAAAL,OAAA;QACAM,OAAA;UACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAAtB,YAAA,GAAAuB,gBAAA,CAAAzB,IAAA;IACA,SAAA0B,KAAA;MACAC,OAAA,CAAAD,KAAA,4CAAAA,KAAA;MACA,KAAAE,OAAA,CAAAC,IAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAA;MACA,MAAAC,cAAA;MACA,MAAAC,eAAA;MACA,MAAAC,YAAA;MAEA,KAAAxB,cAAA,GAAAsB,cAAA,CAAAG,IAAA,MAAA7B,OAAA;MACA,KAAAK,eAAA,GAAAsB,eAAA,CAAAE,IAAA,MAAA5B,QAAA;MACA,KAAAK,YAAA,GAAAsB,YAAA,CAAAC,IAAA,MAAA3B,KAAA;MAEA,YAAAE,cAAA,SAAAC,eAAA,SAAAC,YAAA;IACA;IACA,MAAAwB,kBAAA;MACA,UAAAL,cAAA;QACA;MACA;MAEA;QACA,MAAAjB,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;QACA,MAAAoB,QAAA,SAAAvC,KAAA,CAAAwC,IAAA,CACA,0CACA;UACAvC,IAAA,UAAAO,OAAA,SAAAC,QAAA,SAAAC,KAAA;UAAA;UACAP,KAAA,EAAAa,OAAA;UACAX,WAAA,OAAAA,WAAA;UACAC,eAAA,OAAAA,eAAA;UACAC,mBAAA,OAAAA,mBAAA;UACAC,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,KAAA,OAAAA,KAAA;UACAC,WAAA,OAAAA;QACA,GACA;UACAW,OAAA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA,CACA;QACA,KAAAtB,YAAA,CAAA2B,IAAA,CAAAQ,QAAA,CAAArC,IAAA;QACA;QACA,KAAAG,WAAA;QACA,KAAAC,eAAA;QACA,KAAAC,mBAAA;QACA,KAAAC,OAAA;QACA,KAAAC,QAAA;QACA,KAAAC,KAAA;QACA,KAAAC,WAAA;MACA,SAAAiB,KAAA;QACAC,OAAA,CAAAD,KAAA,mCAAAA,KAAA;QACAa,KAAA;MACA;IACA;IACA,MAAAC,kBAAAC,SAAA;MACA;QACA,MAAA3C,KAAA,CAAA4C,MAAA,2CAAAD,SAAA;UACArB,OAAA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA;QACA,KAAAtB,YAAA,QAAAA,YAAA,CAAAyC,MAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAC,GAAA,KAAAJ,SAAA;MACA,SAAAf,KAAA;QACAC,OAAA,CAAAD,KAAA,mCAAAA,KAAA;QACAa,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}